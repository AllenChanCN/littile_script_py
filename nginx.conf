user  nobody;
worker_processes  1;
events {
    worker_connections  1024;
}
http {
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    keepalive_timeout  65;

    geoip_country /usr/local/nginx/conf/GeoIP.dat;
    geoip_city /usr/local/nginx/conf/GeoLiteCity.dat;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"'
                      '$geoip_country_name $geoip_region $geoip_city';

    set_real_ip_from 118.193.196.147;
    real_ip_header X-Forwarded-For;

    gzip on;
    gzip_min_length 1k;
    gzip_comp_level 2;
    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
    gzip_vary on;

    limit_conn_zone $binary_remote_addr zone=conn_ip:10m;
    limit_conn_zone $server_name zone=conn_server:10m;

    server {
        listen       80;
        server_name  localhost;
        #charset koi8-r;
        access_log  logs/host.access.log  main;

        location /status {
            check_status;
            access_log   off;
            #allow SOME.IP.ADD.RESS;
            #deny all;
        }
    }

    include conf.d/*.conf; 
}





server {
    listen       80;
    server_name  work668.com www.work668.com;

    access_log logs/work668_access.log main;
    error_log logs/work668_error.log;

    limit_conn_log_level warn;
    limit_conn conn_ip 10;
    limit_conn conn_server 1000;

    location / {
        root   html/work668;
        index  index.html index.htm;
    }
    error_page   500 502 503 504  /50x.html;
    error_page   404 403  /404.html;
    location = /50x.html {
        root   html;
    }
    location = /404.html {
        root   html/work668/MKM/ErrorFiles;
    }
}



upstream work668{
      server 103.55.27.145:80;
      server 118.193.196.147:80;
      hash $request_uri;
      hash_method crc32;
}

location / {
        proxy_pass http://abc.com;
        proxy_set_header    Host             $host;#保留代理之前的host
        proxy_set_header    X-Real-IP        $remote_addr;#保留代理之前的真实客户端ip
        proxy_set_header    X-Forwarded-For  $proxy_add_x_forwarded_for;
        proxy_set_header    HTTP_X_FORWARDED_FOR $remote_addr;#在多级代理的情况下，记录每次代理之前的客户端真实ip
        proxy_redirect      default;#指定修改被代理服务器返回的响应头中的location头域跟refresh头域数值
}


set_real_ip_from 10.10.10.10;
real_ip_header X-Forwarded-For;

        check interval=3000 rise=2 fall=5 timeout=1000 type=http;
        check_keepalive_requests 100;
        check_http_send "HEAD / HTTP/1.1\r\nConnection: keep-alive\r\n\r\n";
        check_http_expect_alive http_2xx http_3xx;